#!/bin/sh
# Extract password from encrypted password file
#
# Author: Svend Sorensen

# Begin script

# Decrypt each file argument to stdout
gpg_cat()
{
	if [ $# -eq 0 ]; then
		# Process stdin
		gpg --decrypt
	else
		# Process each argument
		for f in "$@"; do
			gpg --decrypt "$f"
		done
	fi
}

# Decrypt and search in each file argument
decrypt_and_search()
{
	for f in "$@"; do
		# Decrypt file and run awk script
		gpg_cat "$f" | awk -v "regexp=$regexp" \
	                           -v "filename=$f" \
			           -f "$awkfile"
	done

	# Is this better than the loop above?
	#gpg_cat "$@" | awk -v "regexp=$regexp" \
	#                   -v "filename=NOT_IMPLEMENTED" \
	#		    -f "$awkfile"
}

main()
{
	progname=$0

	if [ $# -eq 0 ]; then
		echo "Usage: $progname <regex> [file [file...]]"
		echo
		echo "Search for <regexp> in second field of input.  Input"
		echo "is taken from files, or stdin if no files are given."
		exit 0
	fi

	# Process arguments
	regexp=$1	# awk regular expression search
	shift

	# Find the directory that this script resides in
	dir=`dirname "$progname"`

	# Check if awk script exists
	awkfile=$dir/gpgpass.awk
	if [ ! -f "$awkfile" ]; then
		echo "$progname: error: $awkfile is missing"
		exit 1
	fi

	# Perform search on all arguments, or stdin
	if [ $# -eq 0 ]; then
		# Process stdin as default
		decrypt_and_search "-"
	else
		# Process all file arguments
		decrypt_and_search "$@"
	fi
}

main "$@"

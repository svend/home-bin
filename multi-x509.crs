#!/usr/bin/env run-cargo-script
use std::env;
use std::io::prelude::*;
use std::io;
use std::process::{Command, Stdio};

const BEGIN: &'static str = "-----BEGIN";
const END: &'static str = "-----END";
const COMMAND: &'static str = "cat";

fn run_command(command_and_args: &Vec<String>, stdin: &str) {
    let mut iter = command_and_args.iter();
    let command = iter.next();
    let args: Vec<&String> = iter.collect();

    let mut child = Command::new(command.unwrap_or(&COMMAND.to_string()))
        .args(args)
        .stdin(Stdio::piped())
        .spawn()
        .expect("failed to execute process");

    let _ = child.stdin.as_mut().unwrap().write_all(stdin.as_bytes());
    let _ = child.wait().unwrap();

}

fn main() {
    let stdin = io::stdin();
    let mut cert = Vec::new();

    let mut command: Vec<String> = env::args().collect();
    // Drop file name
    command.drain(0..1);

    for line in stdin.lock().lines() {
        let l = line.as_ref().unwrap();
        if l.starts_with(BEGIN) || !cert.is_empty() {
            cert.push(l.to_owned());
            if l.starts_with(END) {
                run_command(&command, &format!("{}\n", cert.join("\n")));
                cert.clear();
            }
        }
    }
}
